
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ,Режим)
	
	Ошибки = Новый Массив;
	
	Если Договор <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		Отказ = Истина;
		Ошибки.Добавить("Тип договора не абонентская плата");
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, 
		"ВКМ_НачалоДействияДоговора, ВКМ_КонецДействияДоговора, ВКМ_СтоимостьЧасаРаботы");	
	
	Если ДанныеДоговора.ВКМ_НачалоДействияДоговора < Дата 
		ИЛИ ДанныеДоговора.ВКМ_КонецДействияДоговора > Дата Тогда
			Отказ = Истина;
			Ошибки.Добавить("Дата документа не входит в период действия договора");		
	КонецЕсли;		
	
	Если Ошибки.Количество() <> 0 Тогда
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = Ошибка;
			Сообщение.Сообщить();
				
		КонецЦикла;	
		
		Возврат
		
	КонецЕсли;	
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Для Каждого ТекСтрока из ВыполненныеРаботы Цикл
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрока.ФактическиПотраченоЧасов;
		Движение.СуммаКОплате = ТекСтрока.ФактическиПотраченоЧасов * ДанныеДоговора.ВКМ_СтоимостьЧасаРаботы;
	КонецЦикла;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;	
	
	Если ЭтоНовый() ИЛИ Модифицированность() Тогда
		СоздатьУведомление();
	КонецЕсли;	
			
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьУведомление()
	
	ТекстУведомления = СтрШаблон("Была добавлена заявка %1", Ссылка);
	
	НовоеУведомление = Справочники.ВКМ_УведомленияТГ.СоздатьЭлемент();
	НовоеУведомление.ТекстСообщения = ТекстУведомления;
	НовоеУведомление.Записать();
	
КонецПроцедуры	

#КонецОбласти
